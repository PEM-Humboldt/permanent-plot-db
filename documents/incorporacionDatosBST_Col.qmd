---
title: "Ejemplo de incorporación de datos a la base de datos: Red BST-Col"
author: "Marius Bottin"
lang: es
format: 
  gfm:
    df-print: kable
knitr: 
  opts_chunk: 
    fig.path: "./Fig/Incor_BST"
---

El equipo de investigación del Centro de Estudios Socio-ecológicos y Cambio Global utiliza un formato interno de R (formato RDS) para almacenar los datos de parcelas permanentes según un esquema de bases de datos relacionales.
Si bien el lenguaje R no permite directamente imponer reglas de relaciones entre tablas, la lógica interna es la misma que en una base de datos en SQL, con llaves primarias y foráneas.

En este documento, vamos a mostrar como se pueden incorporar los datos  de la red BST-Col en la base de datos SQL. 
Haciendo este ejercicio de incorporación, van a aparecer preguntas y dudas sobre los datos.

## Crear y incializar la base de datos

```{r}
require(RPostgres)
dbname <- "pp_bst_col"
source("../db_creation/reinitializeDB.R")
```


## Leer el archivo

En la carpeta compartida, hay varios archivos RDS:

```{r}
dirRDS<-"../../data_google/4.rdsProyectos/"
dir(dirRDS)
```

Vamos a enforcarnos acá en los datos de la red de Bosques Secos Tropicales de Colombia (BST-Col). 

```{r}
rdsBST<-readRDS("../../data_google/4.rdsProyectos/dataRedBSTCol.rds")
```


## Manejar proyectos y localizaciones de proyectos

En la base de datos biologicas, para razones explicadas [acá]("./dataArchitecture.md"), cada una de las parcelas permanentes debe estar entrada como un proyecto.


```{r}
names(rdsBST)
metadata_tot<-Reduce(rbind,rdsBST$metadata)
head(metadata_tot,n = 5)
```

Antes de poder incorporar los proyectos, en caso de que esos tengan una metodología particular, se debe incorporar la metodología y las variables  que permiten incorporar un codigo de metodología.

```{r}
dbpp<-dbConnect(Postgres(),dbname=dbname)
```


```{sql}
#| connection: dbpp
INSERT INTO main.def_unit(cd_measurement_type, unit, unit_spa, abbv_unit, factor)
VALUES(
(SELECT cd_measurement_type FROM main.def_measurement_type WHERE measurement_type='number'), 'Number of individuals', 'Número de individuos', 'ind.', 1);
```


```{sql}
#| connection: dbpp
INSERT INTO main.def_var(
 cd_unit,
 cd_org_lev,
 cd_var_gp,
 extra_var,
 repeatable,
 var_comment,
 type_var,
 name_dwc,
 extension_dwc,
 name_var,
 description
)
VALUES
  ((SELECT cd_unit FROM main.def_unit WHERE unit='Number of individuals'),
  (SELECT cd_org_lev FROM main.def_organisation_level WHERE org_lev='register'),
  NULL,
  false,
  false,
  'Note that even though this variable can contain true/false value (when there is never more than one individual by register), they are systematized as 0/1',
  'integer',
  'individualCount',
  'occurrence',
  'qt_int',
  'Number of indiduals of a species in a register'
  );
```


```{sql}
#| connection: dbpp
INSERT INTO main.def_method(
 method,
 method_spa,
 cd_var_ind_qt,
 description_spa,
 description,
 required_var,
 cd_org_lev
)
VALUES(
 'Permanent plot 1 (to be defined)',
 'Parcelas permanentes 1 (por definir)',
 (SELECT cd_var FROM main.def_var WHERE name_var='qt_int' AND cd_org_lev = (SELECT cd_org_lev FROM main.def_organisation_level WHERE org_lev='register')),
 'descripción metodo por definir',
 'todo: describe the method',
 NULL,
 (SELECT cd_org_lev FROM main.def_organisation_level WHERE org_lev='register')
);
```

Con las metodologías definidas (no realmente, más bien con los campos obligatorios llenos), podemos definir las localidades que corresponden a las parcelas.

```r
dbLocCol<-dbConnect(Postgres(),dbname='dev_geogref')
colombia<-st_read(dbLocCol,"dissolved_colombia")
dbDisconnect(dbLocCol)
plot(st_geometry(colombia), border=NA, col="red")
```


```{r mapParcelas}
#| fig.height: 10
#| fig.width: 10
require(sf)
CRS<-4686
spatPoints<-st_as_sf(metadata_tot,coords=c("longitude_dec","latitude_dec")) %>%
  st_set_crs(4326) %>% st_transform(CRS)
#plot(st_geometry(spatPoints),reset=F)
#plot(st_geometry(colombia),add=T,border=F,col='turquoise')
#plot(st_geometry(spatPoints),add=T,pch='+')
```


```{r}
schemas<-dbGetQuery(dbpp, "SELECT schema_name FROM information_schema.schemata")$schema_name
if(!"tmp" %in% schemas){dbExecute(dbpp, "CREATE SCHEMA tmp")}
spatPoints$namepp<-rownames(spatPoints)
st_write(obj=spatPoints, dsn=dbpp, layer=Id(schema="tmp",table="spatial_metadata"),delete_layer=T)

```


### Localizaciones

```{sql}
#| connection: dbpp
SELECT namepp, geometry
FROM tmp.spatial_metadata
LIMIT 10
```

```{r}
dbExecute(dbpp,
          "INSERT INTO main.location(location,cd_loc_type,cd_org_lev,pt_geom)
          SELECT namepp, cd_loc_type, cd_org_lev, ST_Transform(geometry,(SELECT srid FROM geometry_columns WHERE f_geometry_column = 'pt_geom' AND f_table_name = 'location'))
          FROM tmp.spatial_metadata
          CROSS JOIN (SELECT cd_loc_type FROM main.def_location_type WHERE location_type='Site point') a
          CROSS JOIN (SELECT cd_org_lev FROM main.def_organisation_level WHERE org_lev='project') b
          ")
```


### Proyectos: parcelas permanentes simples

```{r}
dbExecute(dbpp,
          "INSERT INTO main.project(project, project_description,cd_proj_type,cd_method,cd_loc)
          SELECT namepp,NULL,cd_proj_type,cd_method,cd_loc
          FROM tmp.spatial_metadata sm
          CROSS JOIN (SELECT cd_proj_type FROM main.def_project_type WHERE proj_type='permanent plot') a
          CROSS JOIN (SELECT cd_method FROM main.def_method WHERE method='Permanent plot 1 (to be defined)') b
          LEFT JOIN main.location ON sm.namepp=location
          ")
```


### Trabajando la estructura de los proyectos


```{sql}
#| connection: dbpp
WITH a AS(
SELECT namepp,
  CASE
    WHEN namepp ~ '((Inicial)|(Intermedio)|(Tardio)|(Temprano))$' THEN 'fase'
    WHEN namepp ~ 'T[0-9]{1,3}P[0-9]{1,3}$' THEN 'TP'
    WHEN namepp ~ 'R[0-9]{1,3}T[0-9]{1,3}$' THEN 'RT'
    WHEN namepp ~ 'P[0-9]{1,3}[A-Z]?$' THEN 'P'
    WHEN namepp ~ '[0-9]{1,3}$' THEN 'number'
  END type_name,
  CASE
    WHEN namepp ~ '((Inicial)|(Intermedio)|(Tardio)|(Temprano))$' THEN REGEXP_REPLACE(namepp,'((Inicial)|(Intermedio)|(Tardio)|(Temprano))$','')
    WHEN namepp ~ 'T[0-9]{1,3}P[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp,'T[0-9]{1,3}P[0-9]{1,3}$' ,'')
    WHEN namepp ~ 'R[0-9]{1,3}T[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp, 'R[0-9]{1,3}T[0-9]{1,3}$','')
    WHEN namepp ~ 'P[0-9]{1,3}[A-Z]?$' THEN REGEXP_REPLACE(namepp, 'P[0-9]{1,3}[A-Z]?$' ,'')
    WHEN namepp ~ '[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp, '[0-9]{1,3}$','')
  END gp_parcelas,
  CASE
    WHEN namepp ~ '((Inicial)|(Intermedio)|(Tardio)|(Temprano))$' THEN REGEXP_REPLACE(namepp,'(.*)((Inicial)|(Intermedio)|(Tardio)|(Temprano))$','\2')
    WHEN namepp ~ 'T[0-9]{1,3}P[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp,'(.+)(T[0-9]{1,3}P[0-9]{1,3})$','\2')
    WHEN namepp ~ 'R[0-9]{1,3}T[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp,'(.+)(R[0-9]{1,3}T[0-9]{1,3})$','\2')
    WHEN namepp ~ 'P[0-9]{1,3}[A-Z]?$' THEN REGEXP_REPLACE(namepp,'(.+)(P[0-9]{1,3}[A-Z]?)$','\2')
    WHEN namepp ~ '[0-9]*$' THEN REGEXP_REPLACE(namepp,'([A-Za-z]+)([0-9]*)$','\2')
  END parcela
FROM tmp.spatial_metadata
)
SELECT gp_parcelas, COUNT(DISTINCT namepp),ARRAY_AGG(parcela)
FROM a
GROUP BY gp_parcelas
```

```{r}
dbExecute(dbpp,"
WITH a AS( -- looking from plot groups from the names of the plots
SELECT namepp,
  CASE
    WHEN namepp ~ '((Inicial)|(Intermedio)|(Tardio)|(Temprano))$' THEN 'fase'
    WHEN namepp ~ 'T[0-9]{1,3}P[0-9]{1,3}$' THEN 'TP'
    WHEN namepp ~ 'R[0-9]{1,3}T[0-9]{1,3}$' THEN 'RT'
    WHEN namepp ~ 'P[0-9]{1,3}[A-Z]?$' THEN 'P'
    WHEN namepp ~ '[0-9]{1,3}$' THEN 'number'
  END type_name,
  CASE
    WHEN namepp ~ '((Inicial)|(Intermedio)|(Tardio)|(Temprano))$' THEN REGEXP_REPLACE(namepp,'((Inicial)|(Intermedio)|(Tardio)|(Temprano))$','')
    WHEN namepp ~ 'T[0-9]{1,3}P[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp,'T[0-9]{1,3}P[0-9]{1,3}$' ,'')
    WHEN namepp ~ 'R[0-9]{1,3}T[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp, 'R[0-9]{1,3}T[0-9]{1,3}$','')
    WHEN namepp ~ 'P[0-9]{1,3}[A-Z]?$' THEN REGEXP_REPLACE(namepp, 'P[0-9]{1,3}[A-Z]?$' ,'')
    WHEN namepp ~ '[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp, '[0-9]{1,3}$','')
  END gp_parcelas,
  CASE
    WHEN namepp ~ '((Inicial)|(Intermedio)|(Tardio)|(Temprano))$' THEN REGEXP_REPLACE(namepp,'(.*)((Inicial)|(Intermedio)|(Tardio)|(Temprano))$','\2')
    WHEN namepp ~ 'T[0-9]{1,3}P[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp,'(.+)(T[0-9]{1,3}P[0-9]{1,3})$','\2')
    WHEN namepp ~ 'R[0-9]{1,3}T[0-9]{1,3}$' THEN REGEXP_REPLACE(namepp,'(.+)(R[0-9]{1,3}T[0-9]{1,3})$','\2')
    WHEN namepp ~ 'P[0-9]{1,3}[A-Z]?$' THEN REGEXP_REPLACE(namepp,'(.+)(P[0-9]{1,3}[A-Z]?)$','\2')
    WHEN namepp ~ '[0-9]*$' THEN REGEXP_REPLACE(namepp,'([A-Za-z]+)([0-9]*)$','\2')
  END parcela
FROM tmp.spatial_metadata
),a2 AS( -- after extracting the groups, look whether some plots have the same name than a group
SELECT namepp,
  CASE
    WHEN namepp IN (SELECT DISTINCT gp_parcelas FROM a) THEN 'plot=gp'
    ELSE type_name
  END type_name,
  CASE
    WHEN namepp IN (SELECT DISTINCT gp_parcelas FROM a) THEN namepp
    ELSE gp_parcelas
  END gp_parcelas,
  CASE
    WHEN namepp IN (SELECT DISTINCT gp_parcelas FROM a) THEN 'main'
    ELSE parcela
  END parcela
FROM a
),b AS( -- creating a convex hull for the plot groups and preparing the location and project variables
SELECT gp_parcelas,'Plot group: '|| gp_parcelas AS project,  'Plot group including '|| COUNT(DISTINCT namepp) || ' plots' project_description, cd_proj_type, NULL::int as cd_method, cd_loc_type,
ST_ConvexHull(ST_Collect(ST_Transform(geometry,(SELECT srid FROM geometry_columns WHERE f_geometry_column = 'pol_geom' AND f_table_name = 'location')))) ch_geom
FROM a2
LEFT JOIN tmp.spatial_metadata USING (namepp)
CROSS JOIN (SELECT cd_proj_type FROM main.def_project_type WHERE proj_type='permanent plot set') c
CROSS JOIN (SELECT cd_loc_type FROM main.def_location_type WHERE location_type='Plot group') d
WHERE gp_parcelas IS NOT NULL AND gp_parcelas <> ''
GROUP BY gp_parcelas,cd_proj_type,cd_loc_type
HAVING COUNT(DISTINCT namepp) > 2
UNION
SELECT gp_parcelas,'Plot group: '|| gp_parcelas AS project,  'Plot group including '|| COUNT(DISTINCT namepp) || ' plots' project_description, cd_proj_type, NULL::int as cd_method, cd_loc_type,
ST_Buffer(ST_ConvexHull(ST_Collect(ST_Transform(geometry,(SELECT srid FROM geometry_columns WHERE f_geometry_column = 'pol_geom' AND f_table_name = 'location')))),2) ch_geom -- we put a 2m buffer to pass from a line to a polygon when there are only 2 points
FROM a2
LEFT JOIN tmp.spatial_metadata USING (namepp)
CROSS JOIN (SELECT cd_proj_type FROM main.def_project_type WHERE proj_type='permanent plot set') c
CROSS JOIN (SELECT cd_loc_type FROM main.def_location_type WHERE location_type='Plot group') d
WHERE gp_parcelas IS NOT NULL AND gp_parcelas <> ''
GROUP BY gp_parcelas,cd_proj_type,cd_loc_type
HAVING COUNT(DISTINCT namepp) = 2
), e AS( -- inserting the locations
INSERT INTO main.location(location, cd_loc_type, cd_org_lev, pol_geom)
SELECT gp_parcelas|| ' (multiple plots)',cd_loc_type,cd_org_lev,ch_geom
FROM b
CROSS JOIN (SELECT cd_org_lev FROM main.def_organisation_level WHERE org_lev='project') d
RETURNING cd_loc, location
), f AS( --inserting the projects
INSERT INTO main.project(project, project_description, cd_proj_type, cd_method, cd_loc)
SELECT project, project_description, cd_proj_type, cd_method, cd_loc
FROM b
LEFT JOIN e ON b.gp_parcelas=REPLACE(e.location,' (multiple plots)','')
RETURNING cd_project, project, REGEXP_REPLACE(project,'Plot group: ','') AS gp_parcelas
),g AS( -- creating a temporary table for describing relationship between project, and between locations 
SELECT a2.gp_parcelas,l.cd_loc cd_loc_children, e.cd_loc cd_loc_parent,p.cd_project cd_proj_child, f.cd_project cd_proj_parent
FROM a2
LEFT JOIN e ON a2.gp_parcelas=REPLACE(e.location,' (multiple plots)','')
LEFT JOIN main.location l ON a2.namepp=l.location
LEFT JOIN f ON a2.gp_parcelas=REPLACE(f.project,'Plot group: ','')
LEFT JOIN main.project p ON a2.namepp=p.project
WHERE 
  a2.gp_parcelas IS NOT NULL AND a2.gp_parcelas <> '' AND
  (e.cd_loc IS NOT NULL OR f.cd_project IS NOT NULL)
), h AS( -- inserting relationships between projects 
INSERT INTO main.project_relationship
SELECT cd_proj_child,cd_proj_parent,cd_proj_rel_type
FROM g
CROSS JOIN (SELECT cd_proj_rel_type FROM main.proj_rel_type WHERE proj_rel_type='part_of') i
WHERE cd_proj_parent IS NOT NULL
RETURNING *
)
-- adding parent location from the plot coordinates (points) to the convex hulls
UPDATE main.location 
SET parent_loc=cd_loc_parent
FROM g
WHERE cd_loc_children=cd_loc
")
```


### Manejar los grupos de eventos
#### localización

En el caso de las parcelas permanentes, la localización de los grupos de eventos corresponde a la localización de las parcelas

#### metodología

Estaría bien tener una metodología diferente según los tipos de campañas (diferenciar el census0 de los recensos). 
Tambien nos tocaría definir la escala de descripción de la metodología. Es posible que tengamos diferentes metodologías a la escala de evento que puedan dar una metodología compuesta a la escala del grupo de evento

```{r}
dbExecute(dbpp,"INSERT INTO main.def_method(method, method_spa, description_spa, description, parent_method, cd_org_lev)
          VALUES
            ('pp1_census0','pp1_census0','Establecimiento de una parcela permanente de tipo 1: estructura','Type 1 permanent plot first implementation: structure',(SELECT cd_method FROM main.def_method WHERE method='Permanent plot 1 (to be defined)'),(SELECT cd_org_lev FROM main.def_organisation_level WHERE org_lev='event group')),
            ('pp1_censusn','pp1_censusn','Monitoreo/recenso de una parcela permanente de tipo 1: dinamica, crecimiento, mortalidad, reclutamiento','Type 1 permanent plot monitoring/recensus: dynamic, growth, mortality, recruitment',(SELECT cd_method FROM main.def_method WHERE method='Permanent plot 1 (to be defined)'),(SELECT cd_org_lev FROM main.def_organisation_level WHERE org_lev='event group'));
          ")
```


#### dates gp events

```{r}
datesBST<-data.frame(
  ppid=rep(names(rdsBST$dates), sapply(rdsBST$dates,nrow)),
  Reduce(rbind,rdsBST$dates)
)
dbWriteTable(dbpp,name = Id(schema='tmp',table='dates_census'),value=datesBST, overwrite=T)
dbExecute(dbpp,"INSERT INTO main.gp_event(cd_project, cd_loc, cd_gp_biol,cd_method,date_begin,date_end,campaign_nb)
          SELECT cd_project, cd_loc, 'arbo',
          CASE
            WHEN \"measuringType\"='census0' THEN (SELECT cd_method FROM main.def_method WHERE method='pp1_census0')
            ELSE (SELECT cd_method FROM main.def_method WHERE method='pp1_censusn')
          END,
          \"eventDate\",\"eventDate\",
          CASE
            WHEN \"measuringType\"='census0' THEN 1
            ELSE REPLACE(\"measuringType\",'census','')::int + 1
          END
          FROM tmp.dates_census dc
          LEFT JOIN main.project p ON dc.ppid=p.project
          ")
```

### Manejo de los eventos


```{r}
BSTcensuses0<-data.frame(
  ppid=rep(names(rdsBST$censuses$census0),sapply(rdsBST$censuses$census0,nrow)),
  Reduce(rbind,rdsBST$censuses$census0)
)
subplotNb <- tapply(BSTcensuses0$subplot,BSTcensuses0$ppid, function(x)
  {if (all(is.na(x))){return(1)}else{return(max(x,na.rm = T))}})
table(subplotNb)
weirdNbsubplot<-names(subplotNb)[! subplotNb %in% c(1, 5, 10, 25, 100)]
Reduce(rbind,rdsBST$metadata[weirdNbsubplot])
subplotNb[weirdNbsubplot]
spatPoints[spatPoints$area_ha==0.01,]
BSTcensuses0$comments<-iconv(BSTcensuses0$comments,from='MAC',to='UTF-8')
dbWriteTable(dbpp,Id(schema='tmp',table='censuses0'),BSTcensuses0,overwrite=T)
```


```{sql}
#| connection: dbpp
WITH a AS(
SELECT ppid, ARRAY_AGG(DISTINCT subplot) subplots, MAX(subplot) FILTER (WHERE subplot IS NOT NULL) max_subplot_nb
FROM tmp.censuses0 
GROUP BY ppid
)
SELECT area_ha,length_m,width_m,max_subplot_nb,ARRAY_AGG(namepp), count(*)
FROM a
LEFT JOIN tmp.spatial_metadata sm ON namepp=ppid
GROUP BY area_ha,length_m,width_m,max_subplot_nb
ORDER BY area_ha,max_subplot_nb
```

```{sql}
#| connection: dbpp
WITH a AS(
SELECT ppid, ARRAY_AGG(DISTINCT subplot) subplots, MAX(subplot) FILTER (WHERE subplot IS NOT NULL) max_subplot_nb
FROM tmp.censuses0 
GROUP BY ppid
), b AS(
SELECT ppid,  
  CASE
    WHEN max_subplot_nb IS NULL THEN 1
    WHEN area_ha=0.05 THEN 5
    WHEN area_ha=0.1 THEN 10
    WHEN area_ha=0.25 THEN 25
    WHEN area_ha=1 AND max_subplot_nb=10 THEN 10
    WHEN area_ha=1 AND max_subplot_nb=100 THEN 100
  END nb_event,
  max_subplot_nb,  area_ha,length_m,width_m,subplots
FROM a
LEFT JOIN tmp.spatial_metadata sm ON namepp=ppid
), c AS(
SELECT ppid, generate_series(1,nb_event) event_for_id, nb_event
FROM b
)
INSERT INTO main.event(cd_gp_event,event_id,num_replicate,description_replicate,date_begin,time_begin,date_end,time_end)
SELECT cd_gp_event,
  CASE
    WHEN nb_event=1 THEN c.ppid || '_census0_nosubplot'
    ELSE c.ppid || '_census0_subplot' || event_for_id
  END event_id,
  CASE
    WHEN nb_event=1 THEN 1
    ELSE event_for_id
  END num_replicate,
  CASE
    WHEN nb_event=1 THEN NULL
    ELSE 'subplot '||event_for_id||'/'||nb_event
  END description_replicate,
  "eventDate" date_begin, NULL time_begin, "eventDate" date_end, NULL time_end
FROM c
LEFT JOIN main.project p ON p.project=c.ppid
LEFT JOIN main.gp_event ge ON ge.cd_project=p.cd_project
LEFT JOIN main.def_method m ON ge.cd_method=m.cd_method
LEFT JOIN tmp.dates_census dc ON dc.ppid=c.ppid AND dc."measuringType"='census0'
WHERE m.method ~* 'census0'
RETURNING cd_event,event_id
```

## Taxonomy
```{r}
require(rdsTaxVal)
```



```{r}
BSTtaxonomy<-
  data.frame(
    ppid=rep(names(rdsBST$taxonomy),sapply(rdsBST$taxonomy,nrow)),
    Reduce(rbind,rdsBST$taxonomy)
  )
#table(BSTtaxonomy$family,useNA = 'always')
familyUnknown<-BSTtaxonomy$family == '' | BSTtaxonomy$family == 'indet' | BSTtaxonomy$family == 'Indet'
#table(BSTtaxonomy$genus[!familyUnknown])
genusUnknown <- BSTtaxonomy$genus==''
genusMorpho <- BSTtaxonomy$genus %in%c('morf','Morf','morph','Morph','Morpho','Morfo','morpho','morfo','Mopho')
genusCF <- grepl('^ *cf',BSTtaxonomy$genus,perl = T, ignore.case = T)
specepiUnknown <- BSTtaxonomy$specificEpithet==''
specepiCF_AFF <- grepl('^ *cf',BSTtaxonomy$specificEpithet,perl = T, ignore.case = T) | grepl('^ *aff',BSTtaxonomy$specificEpithet,perl = T,ignore.case = T)
specSP<- grepl('^ *sp *([0-9]{1,2})?$',BSTtaxonomy$specificEpithet)
# In this file we do not really have any infraspecific intormation, but we might have to change that in other files
stopifnot(BSTtaxonomy$infraspecificEpithet[!is.na(BSTtaxonomy$infraspecificEpithet)] %in% c("","sp","sp1"))
```

Ahora vamos a limpiar un poco la información taxonomica para pasarla a resolución de nombres en el backbone de GBIF:

```{r}
simpTaxo<-BSTtaxonomy[c("family","genus","specificEpithet")]
# manual correction for families
familyCorrection<-data.frame(
error=c("Acardiaceae", "Polygoceae", "Apocyceae", "Annoceae", "Boragiceae", "Rhamceae","Primuliaceae", "Thymeleaceae", "Pricramniaceae", "Myrsinaceae", "Leguminosae"),
correction=c("Anacardiaceae","Polygonaceae", "Apocynaceae", "Annonaceae", "Boraginaceae", "Rhamnaceae", "Primulaceae", "Thymelaeaceae", "Picramniaceae", "Primulaceae","Fabaceae")
)
m<-match(simpTaxo$family,familyCorrection$error)
simpTaxo$family[!is.na(m)]<-familyCorrection$correction[m[!is.na(m)]]

genusCorrection <- data.frame(
  error=c("Acardium","Cinmomun","Psicotria","Termilia","Anno"),
  correction=c("Anacardium","Cinnamomum","Psychotria","Terminalia","Annona")
)
m<-match(simpTaxo$genus, genusCorrection$error)
simpTaxo$genus[!is.na(m)]<-genusCorrection$correction[m[!is.na(m)]]


simpTaxo$family[familyUnknown]<-NA
simpTaxo$genus[genusUnknown|genusCF|genusMorpho]<-NA
simpTaxo$specificEpithet[specepiUnknown|specepiCF_AFF|specSP]<-NA
unSimpTaxo<-unique(simpTaxo)
```

### Hasta familias


```{r}
require(taxize)
require(rgbif)
familiesToFind<-na.omit(unique(unSimpTaxo$family))
A<-invisible(get_ids_(na.omit(unique(unSimpTaxo$family)), "gbif"))
okFamilies<-sapply(A$gbif,function(tab){
  perfect<-tab$status=='ACCEPTED' & tab$matchtype=='EXACT' & tab$rank == 'family'
  if(any(perfect)){return(tab$usagekey[perfect])}else{return(NA)}
})
stopifnot(!is.na(okFamilies))
higherRanks <- classification(as.gbifid(okFamilies,check=F))
higherRanks<-lapply(higherRanks,function(tab){
  tab$parent_id<-c(NA, tab$id[1:(nrow(tab)-1)])
  return(tab)
  
})
higherRanks_tab <- unique(Reduce(rbind,higherRanks))
#sHR<-lapply(higherRanks_tab$id,function(x)name_usage(key=x))
#sapply(sHR,function(rg)rg$data$authorship)
dbWriteTable(dbpp,higherRanks_tab,name=dbQuoteIdentifier(conn=dbpp,Id(schema='tmp',table='taxo')),value=higherRanks_tab)
stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid)
          SELECT name, cd_rank,id
          FROM tmp.taxo t
          LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
          WHERE dtr.cd_rank=\'KG\'
          '
dbExecute(dbpp,stat)

stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
          SELECT name, dtr.cd_rank,id,mt.cd_tax
          FROM tmp.taxo t
          LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
          LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
          WHERE dtr.cd_rank=\'PHY\'
          '
cat(stat)
dbExecute(dbpp,stat)


stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
          SELECT name, dtr.cd_rank,id,mt.cd_tax
          FROM tmp.taxo t
          LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
          LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
          WHERE dtr.cd_rank=\'CL\'
          '
cat(stat)
dbExecute(dbpp,stat)

stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
          SELECT name, dtr.cd_rank,id,mt.cd_tax
          FROM tmp.taxo t
          LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
          LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
          WHERE dtr.cd_rank=\'OR\'
          '
cat(stat)
dbExecute(dbpp,stat)


stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
          SELECT name, dtr.cd_rank,id,mt.cd_tax
          FROM tmp.taxo t
          LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
          LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
          WHERE dtr.cd_rank=\'FAM\'
          '
cat(stat)
dbExecute(dbpp,stat)
dbExecute(dbpp,"DROP TABLE tmp.taxo")

```

### Generos


```{r}
genusFamily<-tapply(simpTaxo$family[!is.na(simpTaxo$genus)],simpTaxo$genus[!is.na(simpTaxo$genus)],function(x){
  A<-sort(table(x),decreasing = T)
  names(A)[1]
})
gbGenus<-get_gbifid_(names(genusFamily))

checkGbGenus<-mapply(function(tab,fam,gen){
  if(!nrow(tab)>0){return(NULL)}
  tabg <- tab [!is.na(tab$rank) & tab$rank=='genus',]
  exact <- (!is.na(tabg$genus) &tabg$genus == gen)
  accepted <- (!is.na(tabg$status) & tabg$status == 'ACCEPTED')
  familyOk <- (!is.na(tabg$family) & tabg$family == fam)
  if(sum(exact&accepted&familyOk)>=1)
  {return(tabg[exact&accepted&familyOk,,drop=F][1,,drop=F])}
  if(nrow(tabg)==0){return(tab)}
  return(tabg)
},gbGenus,genusFamily,names(genusFamily))

resN<-sapply(checkGbGenus,function(x)ifelse(is.null(x),0,nrow(x)))
checkGbGenus[resN==0]
checkGbGenus[resN>1]
cat(names(checkGbGenus[resN>1]))

(familyPb<-
  rbind(
    data.frame(genus="Ampelocera", familyError="Ulmaceae", familyCorrection="Cannabaceae"),
    data.frame(genus="Aptandra", familyError="Olacaceae", familyCorrection="Aptandraceae"),
    data.frame(genus="Cochlospermum", familyError="Bixaceae", familyCorrection="Cochlospermaceae"),
    data.frame(genus="Cordia", familyError="Boraginaceae", familyCorrection="Cordiaceae"),
    data.frame(genus="Heisteria", familyError="Olacaceae", familyCorrection="Erythropalaceae"),
    data.frame(genus="Hirtella", familyError="Chrysobalanaceae", familyCorrection="Cordiaceae"),
    data.frame(genus="Humboldtiella", familyError="Fabaceae", familyCorrection="Gosseletinidae"),
    data.frame(genus="Rochefortia", familyError="Boraginaceae", familyCorrection="Ehretiaceae"),
    data.frame(genus="Sambucus", familyError="Adoxaceae", familyCorrection="Viburnaceae"),
    data.frame(genus="Scyphostelma", familyError="Fabaceae", familyCorrection="Apocynaceae")
  ))
synonimia<-rbind(
  data.frame(syno="Arrabidaea", accepted="Fridericia"),
  data.frame(syno="Cnidosculus", accepted="Cnidoscolus"),
  data.frame(syno="Cydista", accepted="Bignonia"),
  data.frame(syno="Margaritopsis", accepted="Eumachia"),
  data.frame(syno="Memora", accepted="Adenocalymma"),
  data.frame(syno="Rollinia", accepted="Annona")
)
orto<-rbind(
  data.frame(error="Simiria",correction="Simira")
)
sinSolución<-c("Bignoniaceae","Euphorbia")
# gbGenus<-mapply(function(x,y)get_gbifid(x,family=y,ask=F,kingdom='Plantae'),names(genusFamily),genusFamily)
# genusToSearch<-unique(na.omit(unSimpTaxo$genus))
# familyGenusToSearch<-unSimpTaxo$family[match(unSimpTa)]
# gbGenus<-invisible(get_ids_(genusToSearch, "gbif"))
# foundCanonical<-sapply(gbGenus$gbif,function(tab)ifelse(nrow(tab)>0,tab$canonicalname[1],NA))
# gbGenus$gbif[!foundCanonical==names(foundCanonical)]
```

### Especies


```{r}
speciesToSearch <- paste(unSimpTaxo$genus[!is.na(unSimpTaxo$genus) & !is.na(unSimpTaxo$specificEpithet)], unSimpTaxo$specificEpithet [!is.na(unSimpTaxo$genus) & !is.na(unSimpTaxo$specificEpithet)])
speciesFamily<-tapply(unSimpTaxo$family[!is.na(unSimpTaxo$genus) & !is.na(unSimpTaxo$specificEpithet)],speciesToSearch,function(x)sort(x,decreasing=T)[1])
gbSpecies <- get_gbifid_(names(speciesFamily))
checkGbSpecies<-mapply(function(tab,fam,spe){
  if(!nrow(tab)>0){return(NULL)}
  tabg <- tab [!is.na(tab$rank) & tab$rank=='species',]
  exact <- (!is.na(tabg$species) &trimws(tabg$species) == spe)
  accepted <- (!is.na(tabg$status) & tabg$status == 'ACCEPTED')
  familyOk <- (!is.na(tabg$family) & tabg$family == fam)
  if(sum(exact&accepted&familyOk)>=1)
  {return(tabg[exact&accepted&familyOk,,drop=F][1,,drop=F])}
  if(nrow(tabg)==0){return(tab)}
  return(tabg)
},gbSpecies,speciesFamily,names(speciesFamily))

resN<-sapply(checkGbSpecies,function(x)ifelse(is.null(x),0,nrow(x)))
checkGbSpecies[resN==0]
checkGbSpecies[resN>1]
cat(names(checkGbSpecies[resN>1]))
toTestSynonym<-sapply(checkGbSpecies[resN>1],function(tab)tab[1,"status"]=="SYNONYM")
synoRes<-sapply(sapply(checkGbSpecies[resN>1][toTestSynonym],function(tab)tab[1,"acceptedusagekey"]),function(x)
  {found=name_usage(key=x)
  return(found$data$canonicalName)
  }
  )
(speSynoAccepted<-data.frame(syno=names(checkGbSpecies[resN>1][toTestSynonym]),accepted=synoRes,row.names = NULL))
toTestFamily<-mapply(function(spe,fam){spe[1,"family"]!=fam},checkGbSpecies[resN>1],speciesFamily[resN>1])
speFamilySuggested <- data.frame(species=names(checkGbSpecies[resN>1][toTestFamily]), familyProblem=speciesFamily[resN>1][toTestFamily], familySuggested= sapply(checkGbSpecies[resN>1][toTestFamily],function(tab)tab[1,"family"]),row.names = NULL)

(suggestedOther <- data.frame(problem=names(checkGbSpecies[resN>1][!(toTestSynonym|toTestFamily)]),suggested=sapply(checkGbSpecies[resN>1][!(toTestSynonym|toTestFamily)],function(tab)tab[1,"canonicalname"]),row.names=NULL))
suggestedOther[]
```



```r
rdsBST$dates[[1]]
allDates<-data.frame(
  pp=rep(names(rdsBST$dates),sapply(rdsBST$dates,nrow)),
  Reduce(rbind,rdsBST$dates)
)
head(allDates)
rdsBST$members[[1]]
allMembers<-data.frame(
  pp=rep(names(rdsBST$members),sapply(rdsBST$members,nrow)),
  Reduce(rbind,rdsBST$members)
)
head(allMembers)
```

# Tags

```r
names(rdsBST)
rdsBST$censuses$census0$AltoSanJorgeInicial
rdsBST$taxonomy$AltoSanJorgeInicial
```


## Archivo TDF 

```{r}
rdsTDF<-readRDS("../../data_google/4.rdsProyectos/dataTDF.rds")

```

### Taxonomía

```{r}
require(rdsTaxVal)
TDFtaxonomy<-new_taxo_oneTab(rdsTDF$taxonomy,currentFormat = "oneTab", taxonRanks_names = c(family="family",genus="genus",species="sp_epithet"),taxonRanks_epithetized = c("sp_epithet"),taxoCode = "code",plot = "plot")
TDFtaxonomy[arrayInd(which(as.matrix(TDFtaxonomy) %in% c("","N/D","NA","N/A")), .dim=dim(TDFtaxonomy), useNames = T)] <- NA
```

*First round of manual correction* (eso es mala practica pero hay casos que lo necesitan):

With the automatic suggestion *Clusia umbellata* gives *Senna umbellata*, but we should get *Tovomita umbellata*

```{r}
TDFtaxonomy$genus[which(getRank(TDFtaxonomy,"species")=="Clusia umbellata")]<-"Tomovita"
```



```{r}
suggestedTDF<-fullTaxonomicDiagnostic(TDFtaxonomy)
```


We should not apply this correction (verified with the expert team):

```{r}
w<-suggestedTDF$suggested$genus == "Terminalia" & suggestedTDF$suggested$sp_epithet == "amazonia"
suggestedTDF$suggested[w,]
row_toSupp<-suggestedTDF$suggested[w,"row"]
suggestedTDF<-suppressSuggest(suggestedTDF,row=row_toSupp)
```

```{r}
suggestedTDF[grep("failed",names(suggestedTDF))]
```

Note that Pachira quinata failed to be recognized in gbif, but the experts told to keep it that way!


```{r}
correctedTDF<-correct(TDFtaxonomy,suggestedTDF)
```

```{r}
#sHR<-lapply(higherRanks_tab$id,function(x)name_usage(key=x))
#sapply(sHR,function(rg)rg$data$authorship)
# dbWriteTable(dbpp,higherRanks_tab,name=dbQuoteIdentifier(conn=dbpp,Id(schema='tmp',table='taxo')),value=higherRanks_tab)
# stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid)
#           SELECT name, cd_rank,id
#           FROM tmp.taxo t
#           LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
#           WHERE dtr.cd_rank=\'KG\'
#           '
# dbExecute(dbpp,stat)
# 
# stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
#           SELECT name, dtr.cd_rank,id,mt.cd_tax
#           FROM tmp.taxo t
#           LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
#           LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
#           WHERE dtr.cd_rank=\'PHY\'
#           '
# cat(stat)
# dbExecute(dbpp,stat)
# 
# 
# stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
#           SELECT name, dtr.cd_rank,id,mt.cd_tax
#           FROM tmp.taxo t
#           LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
#           LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
#           WHERE dtr.cd_rank=\'CL\'
#           '
# cat(stat)
# dbExecute(dbpp,stat)
# 
# stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
#           SELECT name, dtr.cd_rank,id,mt.cd_tax
#           FROM tmp.taxo t
#           LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
#           LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
#           WHERE dtr.cd_rank=\'OR\'
#           '
# cat(stat)
# dbExecute(dbpp,stat)
# 
# 
# stat<-'INSERT INTO main.taxo(name_tax,cd_rank,gbifid,cd_parent)
#           SELECT name, dtr.cd_rank,id,mt.cd_tax
#           FROM tmp.taxo t
#           LEFT JOIN main.def_tax_rank dtr ON t."rank"=dtr.tax_rank
#           LEFT JOIN main.taxo mt ON t.parent_id=mt.gbifid
#           WHERE dtr.cd_rank=\'FAM\'
#           '
# cat(stat)
# dbExecute(dbpp,stat)
# dbExecute(dbpp,"DROP TABLE tmp.taxo")
```

```{r}
completeTaxoTdf<-extractCompleteTaxo(suggestedTDF$analysedGbif)
```

Para varios taxones tenemos la autoridad:
```{r}
authorships<-Reduce(rbind,lapply(suggestedTDF$analysedGbif,function(x)as.data.frame(x[c("gbifid","canonicalname","authorship")])))
m_auth_gb<-match(authorships$gbifid,completeTaxoTdf$gbifid)
m_auth_cn<-match(authorships$canonicalname,completeTaxoTdf$canonicalname)
stopifnot(identical(m_auth_cn,m_auth_gb))
completeTaxoTdf$authorship<-NA
completeTaxoTdf$authorship[na.omit(m_auth_cn)]<-authorships$authorship[!is.na(m_auth_cn)]
```

Tenemos que añadir los taxones que no se resolvieron durante la búsqueda

```{r}
tax<-getLowerTax(correctedTDF)
w_missing<-!is.na(tax) & !tax %in% completeTaxoTdf$canonicalname
correctedTDF[w_missing,]
```


```{r}
# Comparing with database
dbGetQuery(dbpp,
"SELECT NULL")
```

# Export reference Excel file from TDF

```{r}
correctedTDF_extraRanks<-addHigherRanks(correctedTDF,suggestedTDF$analysedGbif)
tdfTaxa<-unique(cbind(extract(correctedTDF_extraRanks,"taxonRanks"),canonicalname=getLowerTax(correctedTDF_extraRanks)))
tdfTaxa<-tdfTaxa[do.call(order,as.list(tdfTaxa)),]

analysedSynonym<-suggestedTDF$analysedGbif[sapply(suggestedTDF$analysedGbif,function(x)nrow(x$synonym))>0]
synonymsTDF<-Reduce(rbind,lapply(analysedSynonym,function(x){
  tab<-x$synonym
  colnames(tab)<-paste("syno",colnames(tab), sep="_")
  data.frame(tab,accepted_gbifid=x$gbifid,acceptedname=x$canonicalname,accepted_authorship=x$authorship)}
  ))
synonymsTDF<-synonymsTDF[!grepl("Terminalia amazonia",synonymsTDF$syno_scientificname),]
saveInExcel("../../TDF_taxonomicReference.xlsx",c("tdfTaxa","synonymsTDF"),overwrite = T)
save(list=c("tdfTaxa" , "synonymsTDF") , file= "../../otherData/TDF_taxonomicReference.RData") 
```



KEW: WCVP
```{r}
dbDisconnect(dbpp)
```

